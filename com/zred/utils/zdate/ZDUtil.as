package com.zred.utils.zdate {		public class ZDUtil {				public function ZDUtil() {			// constructor code		}						/* --- UTILITIES --------------------------------------------------------------------------------------------------------		 *		 *		 */		// converting to seconds		static public function daysToSeconds( $_days:int ):int {			return $_days * 24 * 3600;		}		static public function hoursToSeconds( $_hours:Number ):int {			return $_hours * 3600;		}		static public function secondsToHours( $_seconds:int ):Number {			return $_seconds / 3600;		}		static public function minutesToSeconds( $_minutes:Number ):int {			return $_minutes * 60;		}						// return days in month of		static public function daysInMonthOf( $_monthId:int, $_year:int ):int {			if( $_monthId == 1 ) {				return isLeapYear( $_year ) ? 29 : 28;			}			else if( $_monthId % 2 == 0 && $_monthId <= 6 ) return 31;			else if( $_monthId % 2 != 0 && $_monthId >= 7 ) return 31;			else return 30; 		}		// return days in year of		static public function daysInYear( $_year:int ):int {			return isLeapYear( $_year ) ? 366 : 365;		}								// is year a leap year?		static public function isLeapYear( $_year:int ):Boolean {			if( $_year == 0 ) {				return false;			}			if( $_year % 4 == 0 && $_year % 100 != 0 ) {				return true;			}			else if( $_year % 100 == 0 && $_year % 400 == 0 ) {				return true;			}			else return false;		}								// determine weekday from 		static public function determineWeekdayIndexFrom( $_month:int, $_day:int, $_year:int ):int {			var _t:Array = [0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4];			var _pyear:int = $_year;			_pyear -= $_month < 3 ? 1 : 0;			return ( _pyear + Math.floor( _pyear/4 ) - Math.floor( _pyear/100 ) + Math.floor( _pyear/400 ) + _t[$_month-1] + $_day ) % 7;		}						// extract years from seconds and return remaining seconds		static public function extractYearsFrom( $_seconds:int ):Object {			for( var j:int = 1970;; j++ ) {				var yearInSeconds:int = daysToSeconds( daysInYear( j ));				if( $_seconds >= yearInSeconds )					$_seconds -= yearInSeconds;				else break;			}			return {				years: j,				remainingSeconds: $_seconds			};		}		// extract months from seconds and return remaining seconds		static public function extractMonthsFrom( $_seconds:int, $_year:int ):Object {			for( var i:int = 0; i < 12; i++ ) {				var monthInSeconds:int = daysToSeconds( daysInMonthOf( i, $_year ));				if( $_seconds >= monthInSeconds )					$_seconds -= monthInSeconds;				else break;			}			return {				months: i+1,				remainingSeconds: $_seconds			};		}		// extract days from seconds and return remaining seconds		static public function extractDaysFrom( $_seconds:int ):Object {			var _days:int = 1;			var dayInSeconds:int = daysToSeconds( 1 );			while( $_seconds >= dayInSeconds ) {				$_seconds -= dayInSeconds;				_days++;			}			return {				days: _days,				remainingSeconds: $_seconds			};		}		// extract hours from seconds and return remaining seconds		static public function extractHoursFrom( $_seconds:int ):Object {			var _hours:int = 0;			var hourInSeconds:int = hoursToSeconds( 1 );			while( $_seconds >= hourInSeconds ) {				$_seconds -= hourInSeconds;				_hours++;			}			return {				hours: _hours,				remainingSeconds: $_seconds			};		}		// extract minutes from seconds and return remaining seconds		static public function extractMinutesFrom( $_seconds:int ):Object {			var _minutes:int = 0;			var minuteInSeconds:int = minutesToSeconds( 1 );			while( $_seconds >= minuteInSeconds ) {				$_seconds -= minuteInSeconds;				_minutes++;			}			return {				minutes: _minutes,				remainingSeconds: $_seconds			};		}				/* --- DAYLIGHT SAVINGS UTILITIES ---------------------------------------------------------------------------		 *		 *		 */		// get client dst offset		static public function getClientDstOffset():int {			var _winter:Date = new Date( 2011, 01, 01 ); // after daylight savings time ends			var _summer:Date = new Date( 2011, 07, 01 ); // during daylight savings time			var _now:Date = new Date();			var _winterOffset:Number = _winter.timezoneOffset;			var _summerOffset:Number = _summer.timezoneOffset;			var _nowOffset:Number = _now.timezoneOffset;			if(( _nowOffset == _summerOffset ) && ( _nowOffset != _winterOffset )) 				return 1;			else return 0;		}				// return the client's GMT-offset *WITHOUT* Daylight Savings		static public function getClientTimezoneOffsetInMinutes():int {			var _client:Date = new Date();			return Math.round( _client.timezoneOffset / 60 );		}						/* --- MISC ----------------------------------------------------------------------------------------------		 *		 *		 */		// capitalize first letter in word 		static public function capitalize( $_string:String ):String {			var firstChar:String = $_string.substr( 0, 1 );			var restOfString:String = $_string.substr( 1, $_string.length);			return firstChar.toUpperCase() + restOfString.toLowerCase();		}				// get clients time in utc		static public function getClientsTimeInUTC():int {			var _date:Date = new Date();			var _clientTimestamp:int = Math.round( _date.valueOf() / 1000 );			return _clientTimestamp + hoursToSeconds( getClientDstOffset());		}	}	}