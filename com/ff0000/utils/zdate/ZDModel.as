package com.ff0000.utils.zdate {		import flash.events.EventDispatcher;	import flash.events.Event;		public class ZDModel extends EventDispatcher {		/* -- TIMESTAMP -------------------------------------------		 *		 *	time will always be UTC in seconds		 *		 */		private var _timestamp:int;		internal function set timestamp( $_value:int ):void {			setTimestamp( $_value );			propagateTimestamp();		}		internal function setTimestamp( $_value:int ):void {			_timestamp = $_value;		}		internal function get timestamp():int {			return _timestamp;		}				/* -- CONSTANTS -------------------------------------------		 *		 *		 */		// base UTC constants		internal const UTC_BASE_YEAR:int = 1970;		internal const UTC_BASE_MONTH:int = 0;		internal const UTC_BASE_DAY:int = 0;				// leap seconds - these are periodically and indiscriminately announced and added either on June 30 or Dec 31		internal const LEAP_SECONDS:Array = [			78732000,94633200,126169200,157705200,189241200,220863600,252399600,283935600,315471600,362728800,394264800,425800800,			488959200,567932400,631090800,662626800,709884000,741420000,772956000,820393200,867650400,915087600,1136012400,1230706800		];				// string equivalents		internal const MONTHS_FULL:Array = ['january','february','march','april','may','june','july','august','september','october','november','december'];		internal const MONTHS_ABRV:Array = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec'];		internal const MONTHS_EXCP:Array = ['','','','','','','','','sept','','',''];				internal const WEEKDAYS_FULL:Array = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday'];		internal const WEEKDAYS_ABRV:Array = ['sun','mon','tue','wed','thu','fri','sat'];		internal const WEEKDAYS_EXCP1:Array = ['','','tues','wednes','thur','',''];		internal const WEEKDAYS_EXCP2:Array = ['','','','','thurs','',''];				// defaults		internal const DEFAULT_YEAR:int = 2011;		/* --- DATE ELEMENTS ---------------------------------------------------------------------------------------------		 *		 *		 */		// year		private var _year:int;		internal function set year( $_year:int ):void { 			setYear( $_year ); 			propagateDateElements();		}		internal function setYear( $_year:int ):void {			if( $_year < 100 ) {				if( $_year < 69 ) 					_year = 2000 + $_year;				else _year = 1900 + $_year;			}			else _year = $_year;		}		internal function get year():int {			return _year;		}				// month		private var _month:int;		internal function set month( $_month:* ):void {			setMonth( $_month );			propagateDateElements();		}		internal function setMonth( $_month:* ):void {			if( $_month is String ) {				$_month = $_month.toLowerCase();				var _i:int = 0;				for( _i = 0; _i < 12; _i++ ) {					if( MONTHS_FULL[_i] == $_month || MONTHS_ABRV[_i] == $_month || MONTHS_EXCP[_i] == $_month ) {						_month = _i + 1;						break;					}				}			}			else if( $_month > 0 && ( $_month >= 1 && $_month <= 12 )) {				_month = parseInt( $_month );			}		}		internal function get month():int {			return _month;		}				// day		private var _day:int;		internal function set day( $_day:int ):void {			setDay( $_day );			propagateDateElements();		}		internal function setDay( $_day:int ):void {			if( $_day >= 1 && $_day <= 31 ) {				_day = $_day;			}		}		internal function get day():int {			return _day;		}				// hour		private var _hour:int;		internal function set hour( $_hour:int ):void {			setHour( $_hour );			propagateDateElements();		}		internal function setHour( $_hour:int ):void {			if( $_hour >= 0 && $_hour <= 23 ) {				_hour = $_hour;			}		}		internal function get hour():int {			return _hour;		}				// minute		private var _minute:int;		internal function set minute( $_minute:int ):void {			setMinute( $_minute );			propagateDateElements();		}		internal function setMinute( $_minute:int ):void {			if( $_minute >= 0 && $_minute <= 59 ) {				_minute = $_minute;			}		}		internal function get minute():int {			return _minute;		}				// second		private var _second:int;		internal function set second( $_second:int ):void {			setSecond( $_second );			propagateDateElements();		}		internal function setSecond( $_second:int ):void {			if( $_second >= 0 && $_second <= 59 ) {				_second = $_second;			}		}		internal function get second():int {			return _second;		}				// timezone offset in seconds		private var _timezoneOffset:int;		internal function set timezoneOffset( $_timezoneOffset:int ):void {			setTimezoneOffset( $_timezoneOffset );			propagateDateElements();		}		internal function setTimezoneOffset( $_timezoneOffset:int ):void {			_timezoneOffset = $_timezoneOffset;		}		internal function get timezoneOffset():int {			return _timezoneOffset;		}				// weekday		private var _weekday:String;		internal function set weekday( $_weekday:String ):void {			setWeekday( $_weekday );			propagateDateElements();		}		internal function setWeekday( $_weekday:String ):void {			$_weekday = $_weekday.toLowerCase();			var _i:int = 0;			for( _i = 0; _i < 7; _i++ ) {				if( WEEKDAYS_FULL[_i] == $_weekday || WEEKDAYS_ABRV[_i] == $_weekday || WEEKDAYS_EXCP1[_i] == $_weekday || WEEKDAYS_EXCP2[_i] == $_weekday ) {					_weekday = WEEKDAYS_FULL[_i];					break;				}			}		}		internal function get weekday():String {			return _weekday;		}				/* --- MISC DATA ---------------------------------------------------------------------------------------------		 *		 *		 */		internal var correctForDst:Boolean = true;		/* --- SINGLETON SETUP ---------------------------------------------------------------------------------------		 *		 *		 */		private static var instance:ZDModel;		private static var allowInstantiation:Boolean;		// singleton management		internal static function getInstance():ZDModel {			if( instance == null ) {				allowInstantiation = true;				instance = new ZDModel();				allowInstantiation = false;			}			return instance;		}		public function ZDModel():void {			if( !allowInstantiation ) {				throw new Error( "Error: Instantiation failed: Use ZDModel.getInstance() instead of new.");			}		}								/* --- DISPATCHERS ---------------------------------------------------------------------------------------------		 *		 *		 */		private function propagateTimestamp():void {			dispatchEvent( new Event( 'propagateTimestamp' ));		}				private function propagateDateElements():void {			dispatchEvent( new Event( 'propagateDateElements' ));		}	}}